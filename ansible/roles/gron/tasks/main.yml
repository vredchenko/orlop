---
# Tasks for gron role

- name: Get latest gron release info
  uri:
    url: "https://api.github.com/repos/tomnomnom/gron/releases/latest"
    method: GET
    timeout: 30
    validate_certs: yes
  register: gron_release_info
  retries: 3
  delay: 5
  failed_when: false
  tags:
    - gron

- name: Set gron version (from API or fallback)
  set_fact:
    gron_version: "{{ gron_release_info.json.tag_name if (gron_release_info.status == 200) else 'v0.7.1' }}"
  tags:
    - gron

- name: Set gron download URL and filename
  set_fact:
    gron_download_url: "https://github.com/tomnomnom/gron/releases/download/{{ gron_version }}/gron-linux-amd64-{{ gron_version | regex_replace('^v', '') }}.tgz"
    gron_filename: "gron-linux-amd64-{{ gron_version | regex_replace('^v', '') }}.tgz"
  tags:
    - gron

- name: Ensure Downloads directory exists
  file:
    path: "/home/{{ ansible_user }}/Downloads"
    state: directory
    mode: '0755'
  tags:
    - gron

- name: Download latest gron tarball
  get_url:
    url: "{{ gron_download_url }}"
    dest: "/home/{{ ansible_user }}/Downloads/{{ gron_filename }}"
    mode: '0644'
    timeout: 120
  retries: 3
  delay: 10
  register: gron_download_result
  failed_when: false
  tags:
    - gron

- name: Check if gron download succeeded
  stat:
    path: "/home/{{ ansible_user }}/Downloads/{{ gron_filename }}"
  register: gron_file_check
  tags:
    - gron

- name: Extract gron tarball
  unarchive:
    src: "/home/{{ ansible_user }}/Downloads/{{ gron_filename }}"
    dest: "/home/{{ ansible_user }}/Downloads"
    remote_src: yes
  when: gron_file_check.stat.exists
  tags:
    - gron

- name: Ensure .local/bin directory exists
  file:
    path: "/home/{{ ansible_user }}/.local/bin"
    state: directory
    mode: '0755'
  tags:
    - gron

- name: Install gron to .local/bin (from GitHub)
  copy:
    src: "/home/{{ ansible_user }}/Downloads/gron"
    dest: "/home/{{ ansible_user }}/.local/bin/gron"
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    remote_src: yes
  when: gron_file_check.stat.exists
  tags:
    - gron

- name: Install gron from system repositories (fallback)
  apt:
    name: gron
    state: present
    update_cache: yes
  become: yes
  when: not gron_file_check.stat.exists
  tags:
    - gron

- name: Add gron aliases to bashrc
  lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: "{{ item }}"
    create: yes
    backup: yes
  loop:
    - "alias norg='gron --ungron'"
    - "alias ungron='gron --ungron'"
  tags:
    - gron

- name: Clean up downloaded files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/home/{{ ansible_user }}/Downloads/{{ gron_filename }}"
    - "/home/{{ ansible_user }}/Downloads/gron"
  when: gron_file_check.stat.exists
  tags:
    - gron
