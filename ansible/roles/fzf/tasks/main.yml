---
# Tasks for fzf role

- name: Get latest fzf release info
  uri:
    url: "https://api.github.com/repos/junegunn/fzf/releases/latest"
    method: GET
    timeout: 30
    validate_certs: yes
  register: fzf_release_info
  retries: 3
  delay: 5
  failed_when: false
  tags:
    - fzf

- name: Set fzf version (from API or fallback)
  set_fact:
    fzf_version: "{{ fzf_release_info.json.tag_name if (fzf_release_info.status == 200) else 'v0.54.3' }}"
  tags:
    - fzf

- name: Set fzf download URL and filename
  set_fact:
    fzf_download_url: "https://github.com/junegunn/fzf/releases/download/{{ fzf_version }}/fzf-{{ fzf_version | regex_replace('^v', '') }}-linux_amd64.tar.gz"
    fzf_filename: "fzf-{{ fzf_version | regex_replace('^v', '') }}-linux_amd64.tar.gz"
  tags:
    - fzf

- name: Ensure Downloads directory exists
  file:
    path: "/home/{{ ansible_user }}/Downloads"
    state: directory
    mode: '0755'
  tags:
    - fzf

- name: Download latest fzf tarball
  get_url:
    url: "{{ fzf_download_url }}"
    dest: "/home/{{ ansible_user }}/Downloads/{{ fzf_filename }}"
    mode: '0644'
    timeout: 120
  retries: 3
  delay: 10
  register: fzf_download_result
  failed_when: false
  tags:
    - fzf

- name: Check if fzf download succeeded
  stat:
    path: "/home/{{ ansible_user }}/Downloads/{{ fzf_filename }}"
  register: fzf_file_check
  tags:
    - fzf

- name: Extract fzf tarball
  unarchive:
    src: "/home/{{ ansible_user }}/Downloads/{{ fzf_filename }}"
    dest: "/home/{{ ansible_user }}/Downloads"
    remote_src: yes
  when: fzf_file_check.stat.exists
  tags:
    - fzf

- name: Ensure .local/bin directory exists
  file:
    path: "/home/{{ ansible_user }}/.local/bin"
    state: directory
    mode: '0755'
  tags:
    - fzf

- name: Install fzf to .local/bin (from GitHub)
  copy:
    src: "/home/{{ ansible_user }}/Downloads/fzf"
    dest: "/home/{{ ansible_user }}/.local/bin/fzf"
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    remote_src: yes
  when: fzf_file_check.stat.exists
  tags:
    - fzf

- name: Install fzf from system repositories (fallback)
  apt:
    name: fzf
    state: present
    update_cache: yes
  become: yes
  when: not fzf_file_check.stat.exists
  tags:
    - fzf

- name: Clean up downloaded files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/home/{{ ansible_user }}/Downloads/{{ fzf_filename }}"
    - "/home/{{ ansible_user }}/Downloads/fzf"
  when: fzf_file_check.stat.exists
  tags:
    - fzf
