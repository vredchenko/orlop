name: Build and Publish Orlop Container

on:
  # Manual trigger with version input
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.2.3 or latest)"
        required: true
        default: "latest"
        type: string
      dockerfile:
        description: "Dockerfile to build"
        required: true
        default: "Dockerfile"
        type: choice
        options:
          - Dockerfile
          - Dockerfile.enhanced
      platforms:
        description: "Target platforms"
        required: true
        default: "linux/amd64"
        type: string
      registry:
        description: "Container registry"
        required: true
        default: "ghcr.io"
        type: choice
        options:
          - ghcr.io
          - docker.io

env:
  REGISTRY: ${{ inputs.registry || 'ghcr.io' }}
  IMAGE_NAME: ${{ github.repository }}/omni

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Version tag from manual input
            type=raw,value=${{ inputs.version }},enable=${{ inputs.version != 'latest' }}
            # SHA tag for debugging
            type=sha,prefix={{branch}}-
            # Date tag
            type=raw,value={{date 'YYYY-MM-DD'}}-{{sha}}
          labels: |
            org.opencontainers.image.title=Orlop Deck CLI Toolbelt
            org.opencontainers.image.description=Modern CLI tools collection with latest versions from GitHub releases
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile || 'Dockerfile' }}
          platforms: ${{ inputs.platforms || 'linux/amd64' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Generate build summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Container Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** \`${{ inputs.dockerfile || 'Dockerfile' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** \`${{ inputs.platforms || 'linux/amd64,linux/arm64' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Usage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the container" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "docker run -it ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Included Tools" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **ripgrep** - Fast grep alternative" >> $GITHUB_STEP_SUMMARY
          echo "- **bat** - Better cat with syntax highlighting" >> $GITHUB_STEP_SUMMARY
          echo "- **delta** - Better git diff viewer" >> $GITHUB_STEP_SUMMARY
          echo "- **fzf** - Fuzzy finder" >> $GITHUB_STEP_SUMMARY
          echo "- **starship** - Cross-shell prompt" >> $GITHUB_STEP_SUMMARY
          echo "- **gdu** - Disk usage analyzer" >> $GITHUB_STEP_SUMMARY
          echo "- **lsd** - Better ls with colors and icons" >> $GITHUB_STEP_SUMMARY
          echo "- **micro** - Modern terminal text editor" >> $GITHUB_STEP_SUMMARY
          echo "- **gron** - JSON grep tool" >> $GITHUB_STEP_SUMMARY
          echo "- **fd** - Find alternative" >> $GITHUB_STEP_SUMMARY
          echo "- **hexyl** - Hex viewer" >> $GITHUB_STEP_SUMMARY
          echo "- **hyperfine** - Benchmarking tool" >> $GITHUB_STEP_SUMMARY
          echo "- **procs** - Process viewer" >> $GITHUB_STEP_SUMMARY
          echo "- **tokei** - Code statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **bottom** - System monitor" >> $GITHUB_STEP_SUMMARY
          echo "- **dust** - Disk usage analyzer" >> $GITHUB_STEP_SUMMARY
          echo "- **glab** - GitLab CLI" >> $GITHUB_STEP_SUMMARY
          echo "- **gh** - GitHub CLI" >> $GITHUB_STEP_SUMMARY
          echo "- **mc** - MinIO Client" >> $GITHUB_STEP_SUMMARY

      - name: Test container
        run: |
          echo "🧪 Testing built container..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version || 'latest' }} -c "
            echo '=== Container Test ==='
            echo 'User:' \$(whoami)
            echo 'Shell:' \$SHELL
            echo 'Working Directory:' \$(pwd)
            echo ''
            echo '=== Tool Versions ==='
            rg --version | head -1
            bat --version
            delta --version
            fzf --version
            starship --version
            gdu --version
            lsd --version
            micro --version
            gron --version
            fd --version
            hexyl --version
            hyperfine --version
            procs --version
            tokei --version
            btm --version
            dust --version
            glab --version
            gh --version | head -1
            mc --version | head -1
            echo ''
            echo '✅ All tools working!'
          "

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ always() && needs.build.result == 'success' }}

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version || 'latest' }}
          format: "sarif"
          output: "trivy-results.sarif"
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
